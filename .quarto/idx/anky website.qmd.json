{"title":"Introduction","markdown":{"yaml":{"title":"Introduction","format":{"html":{"toc":true,"toc-depth":2,"number-sections":true,"code-block-bg":true,"code-block-border-left":true}}},"headingText":"Java preliminaries","containsRefs":false,"markdown":"\n\n\n\nTo be in this CSC 220 class, you must have passed the Living With Cyber series\ntaught in CSC 130-132. In that series, you covered the breadth of computer\nscience and learned how to program using Python. At the tail end of CSC 132, you\nmust have also covered some programming in Java. Granted, it might not have\nbeen a lot of hands on and you might not be completely comfortable with it, but\nthis class is based on the assumption that you know what it is, and can write\nsome programs using java.\nAnother thing worth mentioning is that this class is a data structures class and\nNOT a learning how to code in java class. As such the material we’ll cover in class\nwill be mainly about the data structures. However, by the end of the class, you\nwill be expected to be comfortable in programming in Java. In order to bridge this\ngap, you will have to put in a LOT of extra hours just practicing and learning java\non your own. We will spend a few classes at the beginning of the course to cover\nsome of the more unique aspects of java, but the bulk of programming in java is\ngoing to be up to you on your own free time. The longer you take to tackle this\ntask, the more detrimental to your assignments this will be. The assignments in\nthis class are more involved and complex than the ones you saw in the Living With\nCyber series and will be challenging even for someone who is comfortable with\nJava. Therefore, take a good amount of time at the beginning of the quarter (first\ncouple of weeks) to get really comfortable with java and the command-line\nbecause the assignments will come thick and fast, and you don’t want to get\nbogged down with java issues when you are trying to solve data structure issues.\n\nI hope that you are now comfortably <strike>scared</strike> motivated. Here is a link that you can use\nto get comfortable with Java.\n[https://goo.gl/TG4qaE](https://goo.gl/TG4qaE){.external target=\"_blank\"}\n\n\nIt is written for a student that is comfortable with python and so I think it will be\nreally useful for you to read through it a couple of times. It shouldn’t take you more\nthan a couple of hours for each read through. Additionally, practice some basic\nprogramming in java by attempting some of the assignments you did in Living With\nCyber but using java as your language.\n\n## Using the terminal\nUsing the terminal can look daunting at first glance but it isn’t as bad as it looks.\nUnfortunately, like most practical skills one will need to practice using it over and\nover again before they can become good at using it. The benefits are numerous\nand being comfortable with the terminal will set you apart from your competition\nin the work place and in class. After all, every tom, dick, and harry can use an IDE.\nOne of the benefits of using terminal is that combining your code with pre-existing\nscripts and commands is so easy and allows you to use any terminal or bash tools\nthat are already in existance instead of writing new scripts for the same job. This is particularly important when redirecting input and output from java code which\nis something you are going to have to do over and over again in this class. The\nearlier you get comfortable with it, the better for you.\n\nOther than redirecting output, there are multiple things one can do with terminal and/or\nbash.\n[https://goo.gl/YzMeBm](https://goo.gl/YzMeBm){.external target=\"_blank\"}\n\n\n\nThe link above is to a series of short (a couple of minutes each) tutorials on easy\nbash tasks that you can learn to do on terminal. They don’t have any direct impact on\nyour java programming but I would highly encourage that you at least take a look at the first few videos and see what I am talking about when I say that you will want\nto be good at using terminal...and it will take repetition and time. Once you get\ncomfortable with it, you will find that it will be considerably faster than your usual\npoint and click techniques that you are used to and any time you spent watching this\nvideos and trying out some of those commands will be time well spent...trust me.\nOnce you have the latest java jdk installed on your machine, you will have to\nmake sure that it can be compiled and executed from the command line. This is\nparticularly involved with windows machines. Compiling and executing a java file\nshould be automatic with linux machines. Keep track of where (which folder) you\ninstalled java on your window system since you will need that information later.\nParticularly the bin folder. Typically it will be located at\n<br>\n   ``` C:\\Program Files\\Java\\jdk1.8.0_31\\bin```\n</br>\nThis might look different for your own windows computer and so make sure you\ncan find it.\nYou will then need to edit your path variable (under SYSTEM VARIABLES) and add\nyour folder location to it. If done properly, the commands java and javac should\nreturn some intelligible information when typed into the terminal.\n[https://goo.gl/dxHUkg](https://goo.gl/dxHUkg){.external target=\"_blank\"}\n\n\n## Why Java\nJava is a formal programming language and one of the most common in use today.\nBecause of that, it is almost impossible to have a career in some form of\nprogramming and not use java. It is faster than python (particularly for larger\nprograms) and a lot of the security features it possesses allow you to write\nprograms that will crash less often when run. It is also easy to be used by more\nthan one programmer when a team is working on a project together.\n\n## Our first java program...again.\n``` { .default code-line-numbers=\"true\"}\nclass Trial\n{\npublic static void main(String [] args)\n{\nSystem.out.println(“Hello World!”);\n}\n}\n```\n<br>\nThe code above is the java version of the famous hello world program. Before we\nget bogged down with the differences between java and python, we shall run this\nprogram (using terminal).\nYou might recall that java is an interpreted language. This means that running a\njava program is a two step process i.e. compiling and execution. Compiling allows\nthe computer to convert the java program into a form that is easy to distribute\nand execute on multiple systems. It also allows the computer to quickly identify\npotential errors and bring them to your attention before you execute the program.\nContrast this with Python which is a scripted language and therefore has to be\ndistributed as the source file. Additionally many of the errors could only be\nidentified during the program execution which one could argue it too late for\nerrors to be found.\nTo compile, navigate to the folder/directory in which the .java file is, and then run\nthe command:\n<br>\n       ` javac filename.java`\n</br>\nIf there aren’t any syntax errors, then the command above should NOT return any\nmessage or output. It should however create a file (Trial.class) whose name\ndepends on the names of the classes in the java files.\nTo execute the program, run the command:\n<br>\n        `java Trial` \n</br>\nThis should produce the appropriate/expected output to the terminal. If your java\nprogram contained multiple classes, then the compilation would produce multiple\nclass files. To execute your program, you would run the command above using\nwhichever class file contained the “main program.”\nSo now let’s discuss the actual program. Even with something as small as this\nprogram, you should be able to notice a few differences from python. First off,\neverything in Java is in a class. There can’t be a statement, function, etc. that is\nnot in a class. So even for a simple hello world, we have to make a class.\nClasses, functions, and code blocks in general are delineated by curly braces.\nThey show where the code blocks start and end. In python, such blocks were\nmarked by a uniform indentation. While indentation is HIGHLY encouraged in Java,\nit is not strictly enforced.\nStatements in java are ended using a semi-colon. Consider it the full stop or\nperiod of the java programming language. Without it, the compiler will assume\nthat the next statement is just a continuation even if there are multiple spaces\nand or lines between them. The reason for this is that it is common in java to have\nstatements that span multiple lines while that was very infrequent in python.Statements that you want to be executed should be put into functions/methods.You can have any number of functions in the class but there must be a main\nfunction. This function can be compared to the conductor of an orchestra. It is the\nfunction that the compiler will begin and end its execution with. The main function\nis in charge of determining which other functions will be executed if any at all.\nInterestingly, it doesn’t have to be at the top of the class but it being at the top of\nthe class might help with readability of your code. The main program has a\nspecific signature or name i.e.\n``` {.default}\npublic static void main(String [] args)\n```\n\nMemorize it because you will be writing it for every single Java program you write.\n\n\n ","srcMarkdownNoYaml":"\n\n\n# Java preliminaries \n\nTo be in this CSC 220 class, you must have passed the Living With Cyber series\ntaught in CSC 130-132. In that series, you covered the breadth of computer\nscience and learned how to program using Python. At the tail end of CSC 132, you\nmust have also covered some programming in Java. Granted, it might not have\nbeen a lot of hands on and you might not be completely comfortable with it, but\nthis class is based on the assumption that you know what it is, and can write\nsome programs using java.\nAnother thing worth mentioning is that this class is a data structures class and\nNOT a learning how to code in java class. As such the material we’ll cover in class\nwill be mainly about the data structures. However, by the end of the class, you\nwill be expected to be comfortable in programming in Java. In order to bridge this\ngap, you will have to put in a LOT of extra hours just practicing and learning java\non your own. We will spend a few classes at the beginning of the course to cover\nsome of the more unique aspects of java, but the bulk of programming in java is\ngoing to be up to you on your own free time. The longer you take to tackle this\ntask, the more detrimental to your assignments this will be. The assignments in\nthis class are more involved and complex than the ones you saw in the Living With\nCyber series and will be challenging even for someone who is comfortable with\nJava. Therefore, take a good amount of time at the beginning of the quarter (first\ncouple of weeks) to get really comfortable with java and the command-line\nbecause the assignments will come thick and fast, and you don’t want to get\nbogged down with java issues when you are trying to solve data structure issues.\n\nI hope that you are now comfortably <strike>scared</strike> motivated. Here is a link that you can use\nto get comfortable with Java.\n[https://goo.gl/TG4qaE](https://goo.gl/TG4qaE){.external target=\"_blank\"}\n\n\nIt is written for a student that is comfortable with python and so I think it will be\nreally useful for you to read through it a couple of times. It shouldn’t take you more\nthan a couple of hours for each read through. Additionally, practice some basic\nprogramming in java by attempting some of the assignments you did in Living With\nCyber but using java as your language.\n\n## Using the terminal\nUsing the terminal can look daunting at first glance but it isn’t as bad as it looks.\nUnfortunately, like most practical skills one will need to practice using it over and\nover again before they can become good at using it. The benefits are numerous\nand being comfortable with the terminal will set you apart from your competition\nin the work place and in class. After all, every tom, dick, and harry can use an IDE.\nOne of the benefits of using terminal is that combining your code with pre-existing\nscripts and commands is so easy and allows you to use any terminal or bash tools\nthat are already in existance instead of writing new scripts for the same job. This is particularly important when redirecting input and output from java code which\nis something you are going to have to do over and over again in this class. The\nearlier you get comfortable with it, the better for you.\n\nOther than redirecting output, there are multiple things one can do with terminal and/or\nbash.\n[https://goo.gl/YzMeBm](https://goo.gl/YzMeBm){.external target=\"_blank\"}\n\n\n\nThe link above is to a series of short (a couple of minutes each) tutorials on easy\nbash tasks that you can learn to do on terminal. They don’t have any direct impact on\nyour java programming but I would highly encourage that you at least take a look at the first few videos and see what I am talking about when I say that you will want\nto be good at using terminal...and it will take repetition and time. Once you get\ncomfortable with it, you will find that it will be considerably faster than your usual\npoint and click techniques that you are used to and any time you spent watching this\nvideos and trying out some of those commands will be time well spent...trust me.\nOnce you have the latest java jdk installed on your machine, you will have to\nmake sure that it can be compiled and executed from the command line. This is\nparticularly involved with windows machines. Compiling and executing a java file\nshould be automatic with linux machines. Keep track of where (which folder) you\ninstalled java on your window system since you will need that information later.\nParticularly the bin folder. Typically it will be located at\n<br>\n   ``` C:\\Program Files\\Java\\jdk1.8.0_31\\bin```\n</br>\nThis might look different for your own windows computer and so make sure you\ncan find it.\nYou will then need to edit your path variable (under SYSTEM VARIABLES) and add\nyour folder location to it. If done properly, the commands java and javac should\nreturn some intelligible information when typed into the terminal.\n[https://goo.gl/dxHUkg](https://goo.gl/dxHUkg){.external target=\"_blank\"}\n\n\n## Why Java\nJava is a formal programming language and one of the most common in use today.\nBecause of that, it is almost impossible to have a career in some form of\nprogramming and not use java. It is faster than python (particularly for larger\nprograms) and a lot of the security features it possesses allow you to write\nprograms that will crash less often when run. It is also easy to be used by more\nthan one programmer when a team is working on a project together.\n\n## Our first java program...again.\n``` { .default code-line-numbers=\"true\"}\nclass Trial\n{\npublic static void main(String [] args)\n{\nSystem.out.println(“Hello World!”);\n}\n}\n```\n<br>\nThe code above is the java version of the famous hello world program. Before we\nget bogged down with the differences between java and python, we shall run this\nprogram (using terminal).\nYou might recall that java is an interpreted language. This means that running a\njava program is a two step process i.e. compiling and execution. Compiling allows\nthe computer to convert the java program into a form that is easy to distribute\nand execute on multiple systems. It also allows the computer to quickly identify\npotential errors and bring them to your attention before you execute the program.\nContrast this with Python which is a scripted language and therefore has to be\ndistributed as the source file. Additionally many of the errors could only be\nidentified during the program execution which one could argue it too late for\nerrors to be found.\nTo compile, navigate to the folder/directory in which the .java file is, and then run\nthe command:\n<br>\n       ` javac filename.java`\n</br>\nIf there aren’t any syntax errors, then the command above should NOT return any\nmessage or output. It should however create a file (Trial.class) whose name\ndepends on the names of the classes in the java files.\nTo execute the program, run the command:\n<br>\n        `java Trial` \n</br>\nThis should produce the appropriate/expected output to the terminal. If your java\nprogram contained multiple classes, then the compilation would produce multiple\nclass files. To execute your program, you would run the command above using\nwhichever class file contained the “main program.”\nSo now let’s discuss the actual program. Even with something as small as this\nprogram, you should be able to notice a few differences from python. First off,\neverything in Java is in a class. There can’t be a statement, function, etc. that is\nnot in a class. So even for a simple hello world, we have to make a class.\nClasses, functions, and code blocks in general are delineated by curly braces.\nThey show where the code blocks start and end. In python, such blocks were\nmarked by a uniform indentation. While indentation is HIGHLY encouraged in Java,\nit is not strictly enforced.\nStatements in java are ended using a semi-colon. Consider it the full stop or\nperiod of the java programming language. Without it, the compiler will assume\nthat the next statement is just a continuation even if there are multiple spaces\nand or lines between them. The reason for this is that it is common in java to have\nstatements that span multiple lines while that was very infrequent in python.Statements that you want to be executed should be put into functions/methods.You can have any number of functions in the class but there must be a main\nfunction. This function can be compared to the conductor of an orchestra. It is the\nfunction that the compiler will begin and end its execution with. The main function\nis in charge of determining which other functions will be executed if any at all.\nInterestingly, it doesn’t have to be at the top of the class but it being at the top of\nthe class might help with readability of your code. The main program has a\nspecific signature or name i.e.\n``` {.default}\npublic static void main(String [] args)\n```\n\nMemorize it because you will be writing it for every single Java program you write.\n\n\n "},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":2,"number-sections":true,"output-file":"anky website.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","title":"Introduction","code-block-bg":true,"code-block-border-left":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}